 _____   _  _     _____ _                _     _____ _               _   
/  __ \_| || |_  /  __ \ |              | |   /  ___| |             | |  
| /  \/_  __  _| | /  \/ |__   ___  __ _| |_  \ `--.| |__   ___  ___| |_ 
| |    _| || |_  | |   | '_ \ / _ \/ _` | __|  `--. \ '_ \ / _ \/ _ \ __|
| \__/\_  __  _| | \__/\ | | |  __/ (_| | |_  /\__/ / | | |  __/  __/ |_ 
 \____/ |_||_|    \____/_| |_|\___|\__,_|\__| \____/|_| |_|\___|\___|\__|
                                                                         
=========================================================================

Index:

=========================================================================
							Variables

--Syntax:
	<Type> name= <value>;

For further information check "".

=========================================================================
							Constants
--Syntax:
	const <Type> name= <value>;

For further information check "".

=========================================================================
							Conditionals

						----IF, ELSE IF, ELSE----
--Syntax:
	
	IF:
		if(condition)
		{
			code to execute;
		}

	ELSE IF:
		else if(condition)
		{
			code to execute;
		}

	ELSE:
		else if(condition)
		{
			code to execute;
		}

If it just execute one single action it could be written as:

	if(condition)
		code to execute;

						----SWITCH----
Execute a snippet of code comparing a given entry with assigned patterns looking
one that match.

--Syntax:
	
	int x = 2;
	switch(x)
	{
		case <pattern 1>:
			code;
			break;

		case <pattern 2>:
			code;
			break;

	// if none matches. the default's statement will execute. 
		default:
			code;
			break;
	}
	
	In the code above, if the "x" value matches with one of the given patterns
	then the code inside will execute.

	Also it could be used to assign a value to a variable in relation of another:

	int x = 2;
	int y = x switch
	{
		<pattern 1> => valor;
		<pattern 2> => valor;
		<pattern 3> => valor;
	};

						----OPERADOR TERNARIO---- 
Asign a value to a variable if a condition is satisfy.

--Syntax:

	var x = (condition)? consecuence : alternative;


=========================================================================
							Functions

-- Syntax:
	(Type) Name (Parameter1, Parameter2)
	{
		code to execute;
		return value:
	}

-- Ex:
	int Name (string x, bool y)
	{
		code to execute;
		return value
	}

If the function don't return nothing use "void":

	void name ()
	{
		code to execute;
	}


=========================================================================
                         Exceptions
Structures made for react in front of expected errors.

-- Syntax
    try
    {
        code to execute;
    }
    catch(exceptionType <variable>)
    {
        code to execute;
    }

The "try" block execute a portion of code and in case of error it will execute
the "catch" block's code instead. There could be different cath blocks for different
types of exceptions. 

The expections <variable> will save more details about the error.
